When would you want to use a remote repository rather than keeping all your work local?
  
   When you want to make it available to others on your team.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

	Someone might update something in the repository that you do not want.  Also, the latest update in the GitHub might delete things that you are working on.

Describe the differences between forks, clones, and branches. When would you use one instead of another?

	Forks are clones of other peoples work that allow you to make changes without affecting their code.  This allows for open source.
	Clones are copies of a repository either in GitHub or on local.
	Branches are slightly different versions of code that you wish to keep for whatever reason, usually because you are experimenting with features or others might be working on different ideas.
	You would use fork to get started making your own code on a project that you were not intimately involved with.  You would use branch if you are already a key member of a project and want to work on your own code. You would use clone whenever you need a copy of the repository, usually for working locally.

What is the benefit of having a copy of the last known state of the remote stored locally?

	We just learned about git fetch and git merge origin/master master as a way to get the most recent version of a remot repository onto the local repository and then the ability to do a manual merge with conflicts.  The benefit of having the copy is it makes the manual merge easy (the same as when we fixed conflicts on branches).


How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

	We just learned how to create a pull request and make comments.
	You could collaborate using google drive and some standards for what is the most current version but that would require a lot of work.  You could divide a project into seperate parts that don't interact and then have a manager merge them all at the end.  You could create stub classes and then have subteams work on them.
	In general I can't see how anyone would not use this system now that I have seen it in action

	